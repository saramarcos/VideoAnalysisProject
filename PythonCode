import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime
from dateutil.parser import parse

dir = 'D:/projects/Sara Marcos/video/'

# #Datasets:
# 1). GA Data. Variables:
# ga:pageTitle (Title)
# ga:eventAction (variable that needs to go into columns: 25%, 50%, 75%)
# Ga:dimension27 (Tag)
# ga:totalEvents (number that should go into ga:eventAction)

dataset_0=pd.read_csv(dir+'ga_data_final.csv',encoding='latin-1')
dataset_0.rename( columns = {'ga:pageTitle': 'Title'}, inplace = True)
dataset_0.rename(columns={'ga:dimension27' : 'Tag'},inplace=True)
dataset_1 = dataset_0.pivot_table( index = ['Title','Tag','ga:dateHourMinute'], columns = 'ga:eventAction', values = 'ga:totalEvents' )    #..... pivoting ga_df
dataset_1.columns.name = None
ga_df_final = dataset_1.reset_index()

datset_looker_0=pd.read_csv(dir+'looker_data_final.csv',encoding='latin-1')
#2.1. Change variable name “MCP Videos Title” into “Title”
datset_looker_0.rename(columns={'MCP Videos Title':'Title'},inplace=True)

# 2.2. Change variable “MCP Videos File Duration” into “Minutes”
datset_looker_0.rename(columns={'MCP Videos File Duration':'Minutes'},inplace=True)

# 2.3. Change variable “MCP Videos Released Time” into “Date_Time”
datset_looker_0.rename(columns={'MCP Videos Released Time':'Date_Time'},inplace=True)
#... Converting to date time ...
datset_looker_0['Date_Time'] = pd.to_datetime(datset_looker_0['Date_Time'])
#.... 2.3.1
datset_looker_0['day'] = [ datset_looker_0.Date_Time[i].day for i in range( len( datset_looker_0 ) ) ]
datset_looker_0['weekday'] = [ datset_looker_0.Date_Time[i].weekday() for i in range( len( datset_looker_0 ) ) ]
datset_looker_0['month'] = [ datset_looker_0.Date_Time[i].month for i in range( len( datset_looker_0 ) ) ]
datset_looker_0['hour'] = [ datset_looker_0.Date_Time[i].hour for i in range( len( datset_looker_0 ) ) ]


# 2.4. Change vble “MCP Videos Metrics - Daily By Position and Play Type Video Content
# Start” into “Content_Start”

datset_looker_0.rename(columns={'MCP Videos Metrics - Daily By Position and Play Type Video Content Start':'Content_Start'},inplace=True)

# 2.5. Change vble name “MCP Videos Metrics - Daily By Position and Play Type Video
# Content 100%” into “100%”
datset_looker_0.rename(columns={'MCP Videos Metrics - Daily By Position and Play Type Video Content 100%':'100%'},inplace=True)

# 2.6. Change vble name “MCP Videos Metrics - Daily By Position and Play Type Video
# Load” into “Video_load”

datset_looker_0.rename(columns={'MCP Videos Metrics - Daily By Position and Play Type Video Load':'Video_load'},inplace=True)


# 3. Join both GA and Looker datasets matching by title.
merged_df = pd.merge( ga_df_final, datset_looker_0, on = 'Title', how = 'inner' )     #...... Inner joining the two dataframe


# 4. Clean duplicates.
merged_df.drop_duplicates()



# Variables aggregation (in columns):
# 5. Minutes video watched​ (calculating by the length of the file and the percentage
# watched - 25, 50, 75)
# 6. Completion ratio​ (calculating with completion 100% and start video variables)
# 7. Video content start ratio​ (calculating with video start and total number of videos)
# 8. Video content load ratio​ (calculating with video load and total number of videos)
# 9. Get 25% view ratio​ (calculating 25% and total videos), same for 50 and 75%.

merged_df['Completion ratio​']=merged_df['100%']/merged_df['Content_Start']
merged_df['Video_content_start_ratio']=merged_df['Content_Start']/len(merged_df)
merged_df['25% View Ratio']=merged_df['video_25_percent']/len(merged_df)
merged_df['50% View Ratio']=merged_df['video_50_percent']/len(merged_df)
merged_df['75% View Ratio']=merged_df['video_75_percent']/len(merged_df)


# 10. Do some plot analysis
merged_df.hist()
plt.show()

# 11. summary values

month_summary = merged_df.groupby('month')['Content_Start', 'Video_load', 'Completion Rate'].describe()

weekday_summary = merged_df.groupby('weekday')['Content_Start', 'Video_load', 'Completion Rate'].describe()

hour_summary = merged_df.groupby('hour')['Content_Start', 'Video_load', 'Completion Rate'].describe()

tag_summary = merged_df.groupby('Tag')['Content_Start', 'Video_load', 'Completion Rate'].describe()


# 12. Top 5 most watched videos

month_top_5 = merged_df.sort_values(['month','Minutes'],ascending=False).groupby('month').head(5)

weekday_top_5 = merged_df.sort_values(['weekday','Minutes'],ascending=False).groupby('weekday').head(5)

hour_top_5 = merged_df.sort_values(['hour','Minutes'],ascending=False).groupby('hour').head(5)

Tag_top_5 = merged_df.sort_values(['Tag','Minutes'],ascending=False).groupby('Tag').head(5)


# 13 Correlation Matrix

Correlation_Matrix = merged_df[['video_25_percent','video_50_percent','video_75_percent','Minutes','Content_Start','100%','Completion Rate']]
print(Correlation_Matrix.corr())

